import 'dart:async';
import 'package:flutter/material.dart';
import 'package:torch_light/torch_light.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(const FlashlightApp());
}

// ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å (‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏ü‡∏â‡∏≤‡∏¢)
class FlashlightApp extends StatelessWidget {
  const FlashlightApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        brightness: Brightness.dark,
        primaryColor: Colors.amber,
      ),
      home: const FlashlightHomePage(),
    );
  }
}

class FlashlightHomePage extends StatefulWidget {
  const FlashlightHomePage({Key? key}) : super(key: key);

  @override
  _FlashlightHomePageState createState() => _FlashlightHomePageState();
}

class _FlashlightHomePageState extends State<FlashlightHomePage> {
  bool _isTorchOn = false;
  Timer? _strobeTimer;
  int? _strobeFrequency;  // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô null
  bool _isEnglish = false; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏†‡∏≤‡∏©‡∏≤

  Future<void> _toggleTorch() async {
    try {
      if (_isTorchOn) {
        await TorchLight.disableTorch();
      } else {
        await TorchLight.enableTorch();
      }
      setState(() {
        _isTorchOn = !_isTorchOn;
      });
    } catch (e) {
      print('Error: $e');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÑ‡∏ü‡∏â‡∏≤‡∏¢
  void _flashStrobe(int frequency) {
    if (_strobeTimer != null) {
      _strobeTimer?.cancel();
    }

    _strobeTimer = Timer.periodic(Duration(milliseconds: (1000 / frequency).round()), (timer) async {
      if (_isTorchOn) {
        await TorchLight.disableTorch();
      } else {
        await TorchLight.enableTorch();
      }
      setState(() {
        _isTorchOn = !_isTorchOn;
      });
    });
  }

  // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö‡πÑ‡∏ü‡∏â‡∏≤‡∏¢
  void _stopStrobe() {
    _strobeTimer?.cancel();
    setState(() {
      _isTorchOn = false;
    });
    TorchLight.disableTorch();
  }

  @override
  void dispose() {
    _strobeTimer?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_isEnglish ? 'Flashlight App' : '‡πÑ‡∏ü‡∏â‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ï‡∏∂‡∏á‡πÜ'),
        backgroundColor: Colors.black,
        centerTitle: true,
        actions: [
          IconButton(
            icon: const Icon(Icons.language), // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏•‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏≤
            onPressed: () {
              setState(() {
                _isEnglish = !_isEnglish; // ‡∏™‡∏•‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤
              });
            },
          ),
          IconButton(
            icon: const Icon(Icons.person),
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => AboutMePage(isEnglish: _isEnglish)),
              );
            },
          ),
        ],
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Center(
            child: GestureDetector(
              key: const Key('toggle_torch'), // ‡πÄ‡∏û‡∏¥‡πà‡∏° Key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
              onTap: _toggleTorch,
              child: AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                width: 150,
                height: 150,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: _isTorchOn ? Colors.amber : Colors.grey[800],
                  boxShadow: [
                    if (_isTorchOn)
                      BoxShadow(
                        color: Colors.amber.withOpacity(0.7),
                        spreadRadius: 15,
                        blurRadius: 30,
                      ),
                  ],
                ),
                child: Center(
                  child: Icon(
                    _isTorchOn ? Icons.flash_on : Icons.flash_off,
                    color: _isTorchOn ? Colors.black : Colors.amber,
                    size: 80,
                  ),
                ),
              ),
            ),
          ),
          const SizedBox(height: 20),
          Text(
            _isEnglish ? 'Choose Strobe Frequency (Times per second):' : '‡πÅ‡∏ï‡∏∞‡∏ó‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏â‡∏≤‡∏¢\n‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÑ‡∏ü‡∏â‡∏≤‡∏¢‡∏Ñ‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ',
            style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
          ),
          const SizedBox(height: 20),
          DropdownButton<int>(
            hint: Text(
              _isEnglish ? 'Please select a frequency' : '‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö', // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            ),
            value: _strobeFrequency, // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ _strobeFrequency
            items: [1, 2, 3, 4, 5].map((int value) {
              return DropdownMenuItem<int>(
                value: value,
                child: Text(_isEnglish ? '$value times/second' : '$value ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ'),
              );
            }).toList(),
            onChanged: (newValue) {
              setState(() {
                _strobeFrequency = newValue; // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà
              });
              if (newValue != null) {
                _flashStrobe(newValue);
              }
            },
            style: const TextStyle(color: Colors.amber),
            dropdownColor: Colors.grey[800],
            iconEnabledColor: Colors.amber,
          ),
          const SizedBox(height: 20),
          ElevatedButton(
            onPressed: _stopStrobe,
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
            ),
            child: Text(_isEnglish ? 'Stop Strobe' : '‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏û‡∏£‡∏¥‡∏ö'),
          ),
        ],
      ),
    );
  }
}

// ‡∏´‡∏ô‡πâ‡∏≤ About Me
class AboutMePage extends StatelessWidget {
  final bool isEnglish;

  const AboutMePage({Key? key, required this.isEnglish}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(isEnglish ? 'About Me' : '‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏â‡∏±‡∏ô'),
        backgroundColor: Colors.black,
        centerTitle: true,
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              isEnglish ? 'Bio' : '‡∏ä‡∏µ‡∏ß‡∏∞‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            Text(
              isEnglish
                  ? 'Present: Working as a back-end developer at Mass Corporation Co., Ltd.'
                  : '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô ‡∏ó‡∏µ‡πà‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó ‡πÅ‡∏°‡∏™‡∏Ñ‡∏≠‡∏£‡πå‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏ä‡∏±‡πà‡∏ô',
              style: const TextStyle(fontSize: 16),
            ),
            const SizedBox(height: 20),
            Text(
              isEnglish ? 'Technologies' : '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ',
              style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            DropdownButton<String>(
              value: 'dart',
              items: <String>[
                'Python',
                'Javascript',
                'React.js',
                'Next.js',
                'Node.js',
                'Flutter',
                'vscode',
                'android studio',
                'html',
                'firebase',
                'mysql',
                'phpmyadmin',
                'dart',
                'cython',
                'discord.py',
                'discord.js',
                'framer motion',
                'Chakra UI',
                'Three.js'
              ].map((String value) {
                return DropdownMenuItem<String>(
                  value: value,
                  child: Text(value),
                );
              }).toList(),
              onChanged: (newValue) {
                // ‡∏õ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              },
              style: const TextStyle(color: Colors.amber, fontSize: 16),
              dropdownColor: Colors.grey[800],
              iconEnabledColor: Colors.amber,
            ),
            const SizedBox(height: 20),
            Text(
              isEnglish ? 'Social' : '‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•',
              style: const TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 10),
            SocialLinkCard(
              icon: Icons.code,
              label: 'GitHub',
              url: 'https://github.com/pondsan1412',
            ),
            SocialLinkCard(
              icon: Icons.link,
              label: 'Twitter',
              url: 'https://twitter.com/Pondmk1412',
            ),
            SocialLinkCard(
              icon: Icons.person,
              label: 'Facebook',
              url: 'https://www.facebook.com/pondcomp',
            ),
            const SizedBox(height: 20),
            Center(
              child: ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.amber,
                ),
                child: Text(
                  isEnglish ? 'üè† Home' : 'üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å',
                  style: const TextStyle(
                    fontSize: 20,
                    color: Colors.red,
                    fontWeight: FontWeight.bold,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Widget ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Social Link
class SocialLinkCard extends StatelessWidget {
  final IconData icon;
  final String label;
  final String url;

  const SocialLinkCard({
    Key? key,
    required this.icon,
    required this.label,
    required this.url,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Card(
      margin: const EdgeInsets.symmetric(vertical: 5),
      child: ListTile(
        leading: Icon(icon, color: Colors.amber),
        title: Text(label),
        onTap: () {
          _launchURL(url);
        },
      ),
    );
  }

  Future<void> _launchURL(String url) async {
    final Uri uri = Uri.parse(url);
    if (await canLaunchUrl(uri)) {
      await launchUrl(uri);
    } else {
      throw 'Could not launch $url';
    }
  }
}
